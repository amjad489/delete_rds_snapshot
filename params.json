{
  "name": "Delete rds snapshot",
  "tagline": "Python Boto script to delete rds snapshots older than X days",
  "body": "# delete_rds_snapshot\r\nBoto script to delete rds snapshots older than X days\r\n\r\n    usage: delete_rds_snapshots.py [-h] region rds_instance_name days action\r\n    positional arguments:\r\n      region              US-EAST-1 or US-WEST-2\r\n      rds_instance_name   ex: db-master-1\r\n      days                X number of days snapshots need to be deleted\r\n      action              list: prints all the available snapshots to delete\r\n                          delete: delete all the snapshots which are older than the x days\r\n    optional arguments:\r\n      -h, --help         show this help message and exit\r\n  \r\n\r\nfor more scripts please visit https://cloudtutorialsblog.wordpress.com\r\n\r\n    `import argparse\r\n     import sys\r\n     import boto.rds2.exceptions\r\n     from datetime import datetime, timedelta\r\n\r\n\r\n    def delete_rds_snapshots(connobj, rds_instance, duration, action):\r\n        conn = connobj\r\n        delete_time = datetime.utcnow() - timedelta(days=duration)\r\n        rds_snapshots = conn.describe_db_snapshots(db_instance_identifier=rds_instance)\r\n        list_rds_snapshots = rds_snapshots['DescribeDBSnapshotsResponse']['DescribeDBSnapshotsResult']['DBSnapshots']\r\n        for snapshots in list_rds_snapshots:\r\n            if snapshots[\"Status\"] == \"available\":\r\n                create_time = datetime.fromtimestamp(snapshots[\"SnapshotCreateTime\"]).strftime('%Y-%m-%d %H:%M:%S')\r\n            if create_time < delete_time.strftime('%Y-%m-%d %H:%M:%S'):\r\n                if action == \"list\":\r\n                    print(\"Available snapshots: \" + snapshots[\"DBSnapshotIdentifier\"] +\r\n                          \", \" + datetime.fromtimestamp(snapshots[\"SnapshotCreateTime\"]).strftime('%Y-%m-%d %H:%M:%S'))\r\n                if action == \"delete\":\r\n                    conn.delete_db_snapshot(db_snapshot_identifier=snapshots[\"DBSnapshotIdentifier\"])\r\n                    print(snapshots[\"DBSnapshotIdentifier\"] + \" Snapshot deleted succesfully!!\")\r\n\r\n\r\n    def start_from_here(region, rds_instance_name, days, action):\r\n        try:\r\n            conn = boto.rds2.connect_to_region(region)\r\n            delete_rds_snapshots(conn, rds_instance_name, int(days), action)\r\n        except Exception as E:\r\n            print E\r\n\r\n    if __name__ == \"__main__\":\r\n        arg_parser = argparse.ArgumentParser(\"Boto script to delete rds snapshots older than X days\")\r\n        arg_parser.add_argument(\"region\", help=\"US-EAST-1 or US-WEST-2\")\r\n        arg_parser.add_argument(\"rds_instance_name\", help=\"ex: db-master-1\")\r\n        arg_parser.add_argument(\"days\", help=\"X number of days snapshots need to be deleted\")\r\n        arg_parser.add_argument(\"action\", help=\"list:      prints all the available snapshots to delete\\n\"\r\n                                           \"delete:    delete all the snapshots which are older than the x days\")\r\n        if len(sys.argv) < 5:\r\n            arg_parser.print_help()\r\n            sys.exit(1)\r\n        arguments = arg_parser.parse_args()\r\n        start_from_here(arguments.region, arguments.rds_instance_name, arguments.days, arguments.action)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}